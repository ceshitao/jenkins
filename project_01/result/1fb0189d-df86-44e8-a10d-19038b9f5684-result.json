{"name": "test_suggestion_num[web_login0]", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "request = <SubRequest 'web_login' for <Function test_suggestion_num[web_login0]>>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8ff91db7e0fd6ede5e5ab1c6ef14ca56\")>\n\n    @pytest.fixture(scope=\"function\", params=list_a)\n    def web_login(request,browser):\n        libiao = request.param\n        url = libiao[0]\n        username = libiao[1]\n        password = libiao[2]\n        driver = browser\n        driver.get(url)\n        '''元素定位'''\n        Page = login_page(driver)\n        Page.search_input_username = username\n        Page.search_input_password = password\n        Page.search_button_login.click()\n        try:\n            wait = WebDriverWait(driver,3, poll_frequency=0.5)\n>           wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id=\"app_menu\"]/div[2]/div[1]/div/ul/div[3]/li/div/span')))\n\nproject_01\\test_dir\\conftest.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"8ff91db7e0fd6ede5e5ab1c6ef14ca56\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x00000265F6838790>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n>               value = method(self._driver)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8ff91db7e0fd6ede5e5ab1c6ef14ca56\")>\n\n    def _predicate(driver):\n>       return driver.find_element(*locator)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8ff91db7e0fd6ede5e5ab1c6ef14ca56\")>\nby = 'xpath'\nvalue = '//*[@id=\"app_menu\"]/div[2]/div[1]/div/ul/div[3]/li/div/span'\n\n    def find_element(self, by=By.ID, value: Optional[str] = None) -> WebElement:\n        \"\"\"Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = f'[id=\"{value}\"]'\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = f\".{value}\"\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = f'[name=\"{value}\"]'\n    \n>       return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:830: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8ff91db7e0fd6ede5e5ab1c6ef14ca56\")>\ndriver_command = 'findElement'\nparams = {'using': 'xpath', 'value': '//*[@id=\"app_menu\"]/div[2]/div[1]/div/ul/div[3]/li/div/span'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000265F681F700>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x76207D69+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77A7B74B+107]\\\\n\\\\tRtlClearBits [0x77A7B6CF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=112.0.5615.50)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00EDDCE3+50899]\nE       \t(No symbol) [0x00E6E111]\nE       \t(No symbol) [0x00D75588]\nE       \t(No symbol) [0x00D5D333]\nE       \t(No symbol) [0x00DBF4DB]\nE       \t(No symbol) [0x00DCDB33]\nE       \t(No symbol) [0x00DBB6F6]\nE       \t(No symbol) [0x00D97708]\nE       \t(No symbol) [0x00D9886D]\nE       \tGetHandleVerifier [0x01143EAE+2566302]\nE       \tGetHandleVerifier [0x011792B1+2784417]\nE       \tGetHandleVerifier [0x0117327C+2759788]\nE       \tGetHandleVerifier [0x00F75740+672048]\nE       \t(No symbol) [0x00E78872]\nE       \t(No symbol) [0x00E741C8]\nE       \t(No symbol) [0x00E742AB]\nE       \t(No symbol) [0x00E671B7]\nE       \tBaseThreadInitThunk [0x76207D69+25]\nE       \tRtlInitializeExceptionChain [0x77A7B74B+107]\nE       \tRtlClearBits [0x77A7B6CF+191]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'web_login' for <Function test_suggestion_num[web_login0]>>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8ff91db7e0fd6ede5e5ab1c6ef14ca56\")>\n\n    @pytest.fixture(scope=\"function\", params=list_a)\n    def web_login(request,browser):\n        libiao = request.param\n        url = libiao[0]\n        username = libiao[1]\n        password = libiao[2]\n        driver = browser\n        driver.get(url)\n        '''元素定位'''\n        Page = login_page(driver)\n        Page.search_input_username = username\n        Page.search_input_password = password\n        Page.search_button_login.click()\n        try:\n            wait = WebDriverWait(driver,3, poll_frequency=0.5)\n            wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id=\"app_menu\"]/div[2]/div[1]/div/ul/div[3]/li/div/span')))\n        except Exception:\n>           assert False\nE           assert False\n\nproject_01\\test_dir\\conftest.py:66: AssertionError"}, "attachments": [{"name": "stderr", "source": "3a28061f-eda1-489c-9dd4-9421790ad401-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "web_login", "value": "['http://192.168.9.66:8074/HelloWater/', 'admin', '123456']"}], "start": 1681109349597, "stop": 1681109349597, "uuid": "99132204-6a65-4c78-a041-b5ab107aca59", "historyId": "f9654790d1bcef7e5ae969855d6e6a85", "testCaseId": "e2830c3bdcbd0e1225f10ad3e572f096", "fullName": "project_01.test_dir.test_sales_management.Test_Navigation_bar_num#test_suggestion_num", "labels": [{"name": "parentSuite", "value": "project_01.test_dir"}, {"name": "suite", "value": "test_sales_management"}, {"name": "subSuite", "value": "Test_Navigation_bar_num"}, {"name": "host", "value": "mt_rjb"}, {"name": "thread", "value": "22972-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "project_01.test_dir.test_sales_management"}]}